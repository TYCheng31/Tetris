*新增直接降到最底方塊
*分數功能，消除一排加一分
*新增左邊介面

#include <iostream>
#include <curses.h>
#include<string>
#include "wincursor.h"
Screen myScreen;
String sp(" ", 10, 10);

struct graphic {
    int dy;
    int dx;
};

struct Tetromino {
    graphic s[8];
};

Tetromino t[7] = {
    1,50, 1,51, 1,52, 1,53, 1,54, 1,55, 1,56, 1,57,
    0,50, 1,50, 0,51, 1,51, 1,52, 1,53, 1,54, 1,55,
    1,50, 1,51, 1,52, 1,53, 1,54, 0,54, 0,55, 1,55,
    0,50, 1,50, 0,51, 1,51, 0,52, 1,52, 0,53, 1,53,
    1,50, 1,51, 1,52, 0,52, 1,53, 0,53, 0,54, 0,55,
    1,50, 1,51, 1,52, 0,52, 0,53, 1,53, 1,54, 1,55,
    0,50, 0,51, 0,52, 1,52, 0,53, 1,53, 1,54, 1,55 };

int savedpos[21][26] = { {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9} };

int pos_x[8];
int pos_y[8];
int score;
int high;
int randomcolor;// new falling block`s color
int random_x;//new falling block`s x pos
int move_x;//right left moving value
int nonzero;//check row savedpos can be clear or not
bool falling = true;//default the block is falling
bool moving = true;//default the block can moving
bool finished = false;//default the game is not finish
bool removerow = false;//default clear the horizon block is false
void Createblock();
void Checkbottom(int n);
void Checkmoving(int n);
void Checkhorizon(int y);
void Drawblock(int n, int y0, int x0);
void Eraseblock(int n, int y0, int x0);
void Updatefalling();
void Drawborder();
void Rotateblock(int n);
void PrintScore();
void Printkeydown(char c);
void Control(char c);

int main() {
    char keydown;
    Drawborder();
    Screen myScreen;
    myScreen.setTimeOut(100);   // millisecond
    finished = false;
    score = 0;
    while (!finished) {
        Createblock();
        PrintScore();
        falling = true;//default the block can fall
        moving = true;//default the block can move
        removerow = false;//default row block can not be removed
        for (high = 0; high < 20; ++high) {
            Drawblock(randomcolor, high, random_x + move_x);
            keydown = myScreen.key();
            Printkeydown(keydown);
            Checkbottom(randomcolor);
            Eraseblock(randomcolor, high, random_x + move_x);
            Control(keydown);
            myScreen.redraw();
            Checkhorizon(high);
            Updatefalling();
            //Sleep(50);
            if (finished) break;
            if (!falling) break;
        }
        //printw("%d\n", random_x);
        /*
        for (int i = 0; i < 21; i++) {
            for (int j = 0; j < 26; j++) {
                printf("%d", savedpos[i][j]);
            }
            printf("\n");
        }
        printf("----------------------------\n");
        */
    }
    return 0;
}

void Createblock() {
    randomcolor = (rand() % 7) + 1;
    random_x = (rand() % 9) * 2;
    move_x = 0;
}
void Checkbottom(int n) {//use color n to check it is itselves or other block in savedpos
    for (int i = 0; i < 8; i++) {
        if (savedpos[pos_y[i]][pos_x[i] - 50] != 0) {
            falling = false;
            for (int j = 0; j < 8; j++) {
                savedpos[pos_y[j] - 1][pos_x[j] - 50] = n;
            }
            break;
        }
        //printf("%d,  ", savedpos[pos_y[i]][pos_x[i] - 50]);
    }
    //printf("\n"); 
}

void Checkmoving(int n) {
    for (int i = 0; i < 8; i++) {
        if (savedpos[pos_y[i]][pos_x[i] - 51] != 0) {
            moving = false;
            break;
        }
        else if (savedpos[pos_y[i]][pos_x[i] - 49] != 0) {
            moving = false;
            break;
        }
        moving = true;
        //printf("%d,  ", savedpos[pos_y[i]][pos_x[i] - 50]);
    }
}

void Checkhorizon(int y) {
    nonzero = 0;
    for (int i = 0; i < 26; i++) {
        if (savedpos[y][i] == 0) {
            break;
        }
        else {
            nonzero++;
        }
    }
    if (nonzero == 26) {
        for (int j = 50; j <= 75; j++) {
            sp.show(y + 1, j, 0);
        }
        myScreen.redraw();
        for (int i = y; i > 0; i--) {
            for (int j = 0; j < 26; j++) {
                savedpos[i][j] = savedpos[i - 1][j];
            }
        }
        score++;
    }

}

void Drawblock(int n, int y0, int x0) {
    for (int i = 0; i <= 7; i++) {
        sp.show(t[n - 1].s[i].dy + y0, t[n - 1].s[i].dx + x0, n);
        pos_x[i] = t[n - 1].s[i].dx + x0;
        pos_y[i] = t[n - 1].s[i].dy + y0;
        if (!falling) {
            //printw("Current position: (%d, %d)", t[n - 1].s[i].dy + y0, t[n - 1].s[i].dx + x0);
            savedpos[t[n - 1].s[i].dy + y0 - 1][t[n - 1].s[i].dx + x0 - 50] = n;
        }
    }
    myScreen.redraw();
}

void Eraseblock(int n, int y0, int x0) {
    if (falling) {
        for (int i = 0; i <= 7; i++) {
            sp.show(t[n - 1].s[i].dy + y0, t[n - 1].s[i].dx + x0, 0);
        }
        myScreen.redraw();
    }
}

void Updatefalling() {
    for (int i = 0; i < 20; i++) {
        for (int j = 0; j < 26; j++) {
            sp.show(i, j + 50, 0);
        }
    }
    for (int i = 0; i < 20; i++) {
        for (int j = 0; j < 26; j++) {
            sp.show(i + 1, j + 50, savedpos[i][j]);
        }
    }
}

void Drawborder() {//50-75
    for (int Long = 0; Long <= 20; Long++) {
        sp.setText("**");
        sp.show(Long, 48, 0);
        sp.show(Long, 76, 0);
    }
    for (int width = 50; width <= 75; width++) {
        sp.setText("*");
        sp.show(21, width, 0);
        sp.show(22, width, 0);
    }
    myScreen.redraw();
    sp.setText(" ");
}

void PrintScore() {
    sp.setText("Score   " + std::to_string(score));
    sp.show(0, 25, 0); // Adjust the position based on your preference
    myScreen.redraw();
    sp.setText(" ");
}
void Printkeydown(char c) {
    switch (c) {
    case'a':
        c = '<';
        break;
    case'd':
        c = '>';
        break;
    default:
        c = 'v';
        break;
    }
    sp.setText("moving  " + std::string(1, c));
    sp.show(1, 25, 0); // Adjust the position based on your preference
    myScreen.redraw();
    sp.setText(" ");
}

void Control(char c) {
    Checkmoving(randomcolor);
    switch (c) {
    case 'q':
        finished = true;
        break;
    case 'a':
        if (t[randomcolor - 1].s[0].dx + random_x + move_x > 50 && moving == true) {
            move_x -= 2;
            high--;
            break;
        }
        high--;
        break; 
    case 'd':
        if (t[randomcolor - 1].s[7].dx + random_x + move_x < 75 && moving == true) {
            move_x += 2;
            high--;
            break;
        }
        high--;
        break;
    case ' ':
        int existblock = 0;
        int minhigh = 21;
        int temp;
        for (int i = 7; i >= 0; i--) {
            for (int j = pos_y[i]; j < 21; j++) {
                if (savedpos[j][pos_x[i] - 50] != 0) {  
                    if (j < minhigh) {
                        minhigh = j;
                        break;
                    } 
                }
            }        
        }
        //printf("%d ", minhigh);
        high = minhigh - 2;
        break;
    }
}